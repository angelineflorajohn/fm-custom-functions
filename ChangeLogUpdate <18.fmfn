/*
 *  CUSTOM FUNCTION
 *    ChangeLogUpdate ( fieldList ; JSON ; theTimestamp )
 *
 *  DESCRIPTION
 *    Takes the modified fields and sets their values. Be sure to modify the below variables to fit your solution:
 *      ~changeLogExclusions: the field names you don't want to be included in the log
 *      ~dotEscape: what replaces "." in the field name if encountered
 *
 *  PARAMS
 *    fieldList: A list of field names to check the values of
 *    JSON: The current ChangeLog JSON created by this function
 *    theTimestamp: What timestamp the changes happened on. If left blank will grab the current host timestamp
 *
 *  RETURNS
 *    Updated JSON that includes the new values for the modified fields in the following format:
 *      {
 *          fieldName : {
 *               timestamp as ISO : {
 *                   acct: Who did the change
 *                   val : What the field was changed to
 *               }
 *          }
 *      }
 *
 *  DEPENDENCIES
 *    ISOFromTimestamp: by Jeremy Bante
 *    GetCurrentUTCTimestamp
 *
 *  CHANGELOG
 *    2020-03-09: Paul McCudden (paul@peak14.solutions): Created
 *    2020-03-11: Paul McCudden (paul@peak14.solutions): Now doesn't log the field if it's a calc field and escapes "." in the field name
 *    2021-07-21: Paul McCudden (paul@peak14.solutions): Updated to use UTC timestamp
 *    2022-05-10: Paul McCudden (paul@peak14.solutions): Changed to recursive to can be used before version 18
*/

Let ( 
    [
        //--------------SETTINGS------------------
        ~changeLogExclusions = List (
            "zzChangeLog_ae" ;
            "zzCreationTimestampOnHost" ;
		    "zzCreatedBy" ;
		    "zzModificationTimestampHost" ;
		    "zzModifiedBy"
	    );
        ~dotEscape = "~dot~";
        //------------END OF SETTINGS--------------

        ~ISOTimestamp = ISOFromTimestamp ( If ( IsEmpty ( theTimestamp ); Get ( CurrentHostTimestamp ); theTimestamp ) );
        ~thisOriginalField = GetValue ( fieldList ; 1 );
        ~thisEscapedField = Substitute ( ~thisOriginalField ; "." ; ~dotEscape );
        ~newJSON = If ( Left ( JSONFormatElements ( JSON ); 1 ) = "?"; "{}"; JSON );

        //Start with a blank JSON if the passed JSON isn't a valid JSON
        ~newjson = If (
            ( IsEmpty ( FilterValues ( ~changeLogExclusions ; ~thisOriginalField ) ) and ( Right ( LeftWords ( FieldType ( Get ( FileName ) ; ~thisOriginalField ) ; 1 ) ; 4 ) <> "Calc" ) );
            JSONSetElement ( ~newJSON ; ~thisEscapedField & "." & ~ISOTimestamp ; JSONSetElement ( "" ;
                ["val" ; GetField ( ~thisOriginalField ) ; JSONString];
                ["acct" ; Get ( AccountName ) ; JSONString]
            ) ; JSONObject );
            ~newJSON
        )
    ];
    
    If ( ValueCount ( fieldList ) < 2;
      ~newJSON;
      ChangeLogUpdate ( RightValues ( fieldList; ValueCount ( fieldList ) - 1 ); ~newJSON; theTimestamp )
    )

)
