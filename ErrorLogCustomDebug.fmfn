 /*
 *		This function is used to gather environmental data. You may choose
 *		to add or remove name/value pairs from this function as you see fit
 *		for your solution. All error generating custom functions call this
 *		function, so it is the central place to define default environmental
 *		data collected when an error occurs.
 *
 *		Environmental data that is likely to change from the time the error occurs
 *		to the time log data is collected should be included in this function.
*/

While ( 
  [
    ~i = 0 ;
    ~text = "" ;
    ~list = List (


      //<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      // Comment or uncomment what you'd like to recieve here.
      //<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
      "AccountExtendedPrivileges" ;
      "AccountGroupName" ;
      //"AccountName" ; // Logged by default
      "AccountPrivilegeSetName" ;
      "AccountType" ;
      "ActiveFieldContents" ;
      "ActiveFieldName" ;
      "ActiveFieldTableName" ;
      "ActiveLayoutObjectName" ;
      "ActiveModifierKeys" ; 
      "ActivePortalRowNumber" ;
      "ActiveRecordNumber" ;
      //"ActiveRepetitionNumber" ;
      //"ActiveSelectionSize" ;
      //"ActiveSelectionStart" ;
      //"AllowAbortState" ;
      //"AllowFormattingBarState" ;
      "ApplicationArchitecture" ;
      //"ApplicationLanguage" ;
      "ApplicationVersion" ;
      //"CalculationRepetitionNumber" ;
      //"ConnectionAttributes" ;
      "ConnectionState" ;
      //"CurrentDate" ;
      "CurrentExtendedPrivileges" ;
      "CurrentHostTimestamp" ;
      "CurrentPrivilegeSetName" ;
      //"CurrentTime" ;
      //"CurrentTimestamp" ; // Logged By default
      "CurrentTimeUTCMilliseconds" ;
      "CustomMenuSetName" ;
      //"DesktopPath" ;
      "Device" ;
      //"DocumentsPath" ;
      //"DocumentsPathListing" ;
      //"EncryptionState" ;
      "ErrorCaptureState" ;
      //"FileLocaleElements"
      //"FileMakerPath" ;
      //"FileName" // Logged by default
      "FilePath" ;
      //"FileSize" ;
      "FoundCount" ;
      //"HighContrastState" ;
      "HostApplicationVersion" ;
      "HostIPAddress" ;
      "HostName" ;
      "InstalledFMPlugins" ;
      "InstalledFMPluginsAsJSON" ;
      "LastError" ;
      "LastExternalErrorDetail" ;
      "LastMessageChoice" ;
      "LayoutAccess" ;
      //"LayoutCount" ;
      "LayoutName" ;
      "LayoutNumber" ;
      "LayoutTableName" ;
      "LayoutViewState" ;
      "MenubarState" ;
      "ModifiedFields" ;
      "MultiUserState" ;
      "NetworkProtocol" ;
      "NetworkType" ;
      //"PageNumber" ;
      "PersistentID" ;
      //"PreferencesPath" ;
      //"PrinterName" ;
      //"QuickFindText" ;
      "RecordAccess" ;
      "RecordID" ;
      //"RecordModificationCount" ;
      //"RecordNumber" ;
      "RecordOpenCount" ;
      "RecordOpenState" ;
      "RegionMonitorEvents" ;
      //"RequestCount" ;
      //"RequestOmitState" ;
      //"ScreenDepth" ;
      //"ScreenHeight" ;
      //"ScreenScaleFactor" ;
      //"ScreenWidth" ;
      //"ScriptAnimationState" ;
      //"ScriptName"; // Logged by default
      "ScriptParameter" ;
      "ScriptResult" ;
      "SessionIdentifier" ;
      "SortState" ;
      "StatusAreaState" ;
      "SystemDrive" ;
      "SystemIPAddress" ;
      "SystemLanguage" ;
      "SystemLocaleElements" ;
      //"SystemNICAddress" ;
      "SystemPlatform" ;
      "SystemVersion" ;
      //"TemporaryPath" ;
      //"TextRulerVisible" ;
      //"TotalRecordCount" ;
      "TouchKeyboardState" ;
      //"TriggerCurrentPanel" ;
      //"TriggerExternalEvent" ;
      //"TriggerGestureInfo" ;
      //"TriggerKeystroke" ;
      "TriggerModifierKeys" ;
      //"TriggerTargetPanel" ;
      "UserCount" ;
      "UserName" ;
      //"UseSystemFormatsState" ;
      //"UUID" ;
      //"UUIDNumber" ;
      //"WindowContentHeight" ;
      //"WindowContentWidth" ;
      //"WindowDesktopHeight" ;
      //"WindowDesktopWidth" ;
      //"WindowHeight" ;
      //"WindowLeft" ;
      "WindowMode" ;
      "WindowName" ;
      //"WindowOrientation" ;
      "WindowStyle" ;
      //"WindowTop" ;
      "WindowVisible" ;
      //"WindowWidth" ;
      "WindowZoomLevel"
    ) 
  ] ; 

   ~i < ValueCount ( ~list ) ;

   [
    ~i = ~i + 1 ;
    ~thisItem = GetValue ( ~list ; ~i ) ;
    ~text = If ( not IsEmpty ( ~text ); ~text & ", " ) &
      ~thisItem & ": " & Evaluate ( "Get ( " & ~thisItem & " )" )
  ];

  ~text
  
)