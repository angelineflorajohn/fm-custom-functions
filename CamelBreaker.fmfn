/*
 *  CUSTOM FUNCTION
 *    CamelBreaker ( camelCase )
 *
 *  DESCRIPTION
 *    Breaks camel case into readable words
 *
 *  PARAMS
 *    camelCase: Any text string in the camel case format
 *
 *  RETURNS
 *    string
 *
 *  DEPENDENCIES
 *    --None--
 *
 *  CHANGELOG
 *    2021-09-30: Paul McCudden (paul@peak14.solutions): Created
*/

While (
    [
        ~camelCase = camelCase;
        ~length = Length ( ~camelCase );
        ~i = 0;
        ~broken = "";
        ~alpha = "abcdefghijklmnopqrstuvwxyz";
        ~allAlpha = ~length = Length ( Filter ( ~camelCase ; ~alpha ) )
    ];

    ~i < ~length and not ~allAlpha;

    [
        ~i = ~i + 1;
        ~thisChar = Middle ( ~camelCase; ~i; 1 );
        ~lastChar = If ( ~i = 1; ""; Middle ( ~camelCase; ~i - 1; 1 ) );
        ~addSpace = Exact ( ~thisChar; Upper ( ~thisChar ) ) and
            Exact ( ~lastChar; Lower ( ~lastChar ) ) and 
            not IsEmpty ( Filter ( ~alpha ; ~lastChar )  ) and
            not IsEmpty ( Filter ( ~alpha ; ~thisChar )  )
        ;
        ~broken = ~broken & If ( ~addSpace and ~i > 1; " " ) & ~thisChar
    ];

    Case (
        ~allAlpha; TrimAll ( Proper (
            Substitute ( camelCase;
                ["A"; " A"]; 
                ["B"; " B"];
                ["C"; " C"];
                ["D"; " D"];
                ["E"; " E"];
                ["F"; " F"];
                ["G"; " G"];
                ["H"; " H"];
                ["I"; " I"];
                ["J"; " J"];
                ["K"; " K"];
                ["L"; " L"];
                ["M"; " M"];
                ["N"; " N"];
                ["O"; " O"];
                ["P"; " P"];
                ["Q"; " Q"];
                ["R"; " R"];
                ["S"; " S"];
                ["T"; " T"];
                ["U"; " U"];
                ["V"; " V"];
                ["W"; " W"];
                ["X"; " X"];
                ["Y"; " Y"];
                ["Z"; " Z"]  
            ) );
            1; 0
        );
        ~broken
    )
)