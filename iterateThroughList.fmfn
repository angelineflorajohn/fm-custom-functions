/*
 *  CUSTOM FUNCTION
 *    iterateThroughList ( theList; thisVariableName; iterationVariableName)
 *
 *  DESCRIPTION
 *    To be used in the "Exit Loop If" Script step and will return true or false
 *
 *  PARAMS
 *    list: The variable that contains the list to iterate through
 *    iterationVariableName (optional): The name of the variable to use to count through the list. If nothing passed, will use $i. Clears after last iteration
 *    thisVariableName (optional): The name of the variable to set this current iteration variable to. If nothing passed, will use $thisValue
 *
 *  RETURNS
 *    True or False
 *
 *  DEPENDENCIES
 *    --None--
 *
 *  CHANGELOG
 *    2022-03-28: Paul McCudden: Created
*/

Let (
    [
        thisVariableName = If ( IsEmpty ( thisVariableName ); "$thisValue"; If ( Left ( thisVariableName; 1 ) <> "$"; "$" ) & thisVariableName );
        iterationVariableName = If ( IsEmpty ( iterationVariableName ); "$i"; iterationVariableName );
        
        ~newIteration = Evaluate ( iterationVariableName ) + 1;
        ~exitLoop = ~newIteration >= ValueCount ( theList );
        ~newIteration = If ( ~exitLoop; ""; ~newIteration );
        ~newVariableValue = If ( ~exitLoop; ""; GetValue ( theList; ~newIteration ) );

       ~letStatement = "Let([" & thisVariableName & "=\"" & ~newVariableValue & "\";" & iterationVariableName & "=\"" & ~newIteration & "\"];" & ~exitLoop & ")"
    ];

    Evaluate ( ~letStatement )

)/* Collection Library V1.0.0 */
/* 2021-02-24 Nat Robinson, Beezwax Datatools */


Case(

/*PUBLIC FUNCTIONS*/


	function = "Append";
		/* 	APPEND:
		Adds a row to the end of a collection, and increase the size of the collection by 1.  
		If the Collection does not exist, it will be created, the size set to 1 and the value placed at index 1 . 
		If the collection exists but is empty, the size will be set to 1 and value placed at index 1.
		The currentIndex of the Collection will remain unchanged.  
		Created by Nat Robinson 02-03-2021
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID )  ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") ;
			~size =
				If(
					IsEmpty(~size) ; 
						Let( ~void = Collection.New(collectionID) ; 0 ) ;
					~size
				)			
		];
			Case(
				~size = "?" ;
					False ;
				Collection.Ω( "ΩsetValue";~convertedVarName;  ~size + 1  ;value;"";"" )  & 
				Collection.Ω( "ΩsetSize";~convertedVarName;"";"";~size + 1 ;"" )  &  
				True
			)
		) ;
	

	function = "Clear";
		/* CLEAR:
		Clear all traces of a collection, including size, collectionID, currentIndex, and all collection entries. 
		*/	
	
		While( 
			[
				~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID )  ;
				~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") ;
				~i = 1  ;
				~void = 
					Collection.Ω( "ΩsetSize";~convertedVarName;"";"";"";"" ) &
					Collection.Ω( "ΩsetCurrentIndex" ; ~convertedVarName ; "" ;"";""; "") &
					Evaluate( "Let( " &  ~convertedVarName & "_@collectionID  = \"\" ; 0 )")
			] ; 
				~i <= ~size ;
			[
				~void =
					Evaluate( "Let( " &  ~convertedVarName & "__" & Right ( 1000000000 + ~i; 9)  & " = \"\" ; 0 )") ;
				~i = ~i + 1 
			] ;
				True
		) ; 


	function = "Combine";	
		/* 	COMBINE:
		Combine two Collections by stacking the addCollection on top of the base Collection.
		If addCollection is empty, baseCollection is left unchanged.  
		If baseCollection is empty, addCollection will simply be duplicated.
		The addCollection will be left unchanged.
		The currentIndex of baseCollection will be left unchanged.
		 */  
		
		Let( [
	
	
			~baseCollectionID = JSONGetElement ( collectionID ; 0 ) ;
			~addCollectionID = JSONGetElement ( collectionID ; 1 ) ;
			~baseConvertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; ~baseCollectionID ) ; 
			~addConvertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; ~addCollectionID )  ;
			~baseSize = GetAsNumber ( Collection.Ω( "ΩgetSize" ; ~baseConvertedVarName ; ""; "";""; "") ) ; 
			~addSize = Collection.Ω( "ΩgetSize" ; ~addConvertedVarName ; ""; "";""; "") ;
			~void = 
				If( 
					~baseSize < 1 ;  
						Collection.New(~baseCollectionID) 
				)
			
		] ;
			While(
					~i = 1 ;
					~i <= ~addSize ;
				[
					~void =  Collection.Ω( "ΩsetValue";~baseConvertedVarName;~i + ~baseSize  ; Collection.Ω( "ΩgetValue" ; ~addConvertedVarName; ~i ;"";"";"");"";"" ) ;
					~i = ~i + 1 
				];
					Collection.Ω( "ΩsetSize";~baseConvertedVarName;"";"";0 + ~baseSize + ~addSize;"" ) & 
					True
			)
		) ;
	


	function = "Duplicate";	
		/* 	DUPLICATE:
		Duplicate the sourceCollection with the name targetCollection.
		sourceCollection is left unchanged. 
		*/
		
		Let( [
		
			~sourceCollectionID = JSONGetElement ( collectionID ; 0 ) ;
			~targetCollectionID = JSONGetElement ( collectionID ; 1 ) ;
			~sourceConvertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; ~sourceCollectionID ) ; 
			~targetConvertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; ~targetCollectionID ) ;
			~sourceSize = Collection.Ω( "ΩgetSize" ; ~sourceConvertedVarName ; ""; "";""; "") 	
		] ;
			If ( 
				~sourceConvertedVarName = ~targetConvertedVarName ; 
					0 ;
				Let(
					~void = Collection.New (~targetCollectionID) ; 
					While(
							~i = 1 ;
							~i <= ~sourceSize ;
						[
							~void = Collection.Ω( "ΩsetValue"; ~targetConvertedVarName ; ~i ;  Collection.Ω( "ΩgetValue" ;  ~sourceConvertedVarName; ~i ;"";"";"") ; "";"") ;
							~i = ~i + 1 
						];
							Collection.Ω( "ΩsetSize"; ~targetConvertedVarName;"";"";~sourceSize;"" )
					)
				)
			)		
		);


	function = "FromArray" ;
		/*	FROMARRAY:
			Translates a JSON array into a collection.
			If a collection exists by that id already it will be cleared out.
			Not valid JSON array will product a blank collection.
			Null values in the array will create an empty row in the collection.
			Number of elements in the array will equal exactly the number of rows in the collection.
		*/
		Let ( [
			~void = Collection.New ( collectionID ) ;
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ;
			~start  = Position ( value ; "[" ; 0 ; 1 );
			~jfe_array  = Left ( value ; ~start) & "{\"a\":1}," & Right ( value ; Length ( value ) - ~start ) ;
			~jfe_array = JSONFormatElements (  ~jfe_array  ) ;
			~jfe_array_len = Length ( ~jfe_array );
			~jfe_array = If( Left( ~jfe_array ; 1 ) = "?" ; "" ; Middle ( ~jfe_array ; 21 ; ~jfe_array_len - 22 ) );
			~fake_sep = Char( 9000090001300044 ) ;
			~true_sep = Char( 90001300044 ) ;
			~fake_sep_uuid = Left( Get(UUID); 6 ) ;
			~true_sep_uuid = Left ( Get(UUID); 6 ) ;
			~cr_uuid = Left( Get(UUID) ;6 );
			~jfe_array = 
				Substitute ( ~jfe_array 
					; [ ~fake_sep ; ~fake_sep_uuid ]  
					; [ ~true_sep ; ~true_sep_uuid ]  
					; [ "¶" ; ~cr_uuid ]  
					; [ ~true_sep_uuid ; "¶" ]  
				) 
		] ;
			Let( 
				~count = ValueCount ( ~jfe_array ) ;
				While ( 
					[ 
						~cr_pos = not IsEmpty ( ~jfe_array );
						~list = ~jfe_array;
						~list_length = Length ( ~list ) ;
						~i = 1
					] ; 
						~cr_pos;
					[ 
						~cr_pos = Position ( ~list ; "¶" ; 0 ; 1 ) ;
						~value =  If (~cr_pos = 0 ; ~list ;  Left(  ~list ; ~cr_pos - 1 ) ) ; 
						~list = Replace ( ~list ; 1 ; ~cr_pos  ;  "" ) ; 
						~list_length = ~list_length - ~cr_pos ;
						~value = Substitute ( ~value ; [ ~cr_uuid ; "¶" ] ; [ ~fake_sep_uuid ; ~fake_sep ] ) ; 
						~value_first = Left ( ~value ; 1 ) ;
						~value = 
							Case(
								~value = "null" ; "" ;  
								~value_first = "{" ; JSONSetElement ( "{}" ; "" ; ~value ; JSONObject ) ;
								~value_first = "[" ; JSONSetElement ( "[]" ; "" ; ~value ; JSONArray ) ;
								~value_first = "\"" ; JSONGetElement ( "[" & ~value & "]" ; 0 ) ;
								~value
							) ;
						~void = Collection.Ω( "ΩsetValue";~convertedVarName; ~i ;~value;"";"" ) ; 
						~i = ~i + 1 
					] ; 
					Collection.Ω( "ΩsetSize";~convertedVarName;"";""; ~i - 1;"" ) 
				)	
			)
		) ;



	function = "FromList" ;
		/*	FROMLIST:
			Translates a value list into a collection.
			If a collection exists by that id already it will be cleared out.
			Empty values in the value list will create an empty row in the collection.
			Number of values in the list will equal exactly the number of rows in the collection.
		*/
		Let( [
			~void = Collection.New ( collectionID ) ;
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID )
		];
			While ( 
				[
					~cr_pos = not IsEmpty ( value ) ;
					~list = value;
					~list_length = Length ( ~list ) ;
					~i = 1
				];
					~cr_pos;
				[
					~cr_pos = Position ( ~list ; "¶" ; 0 ; 1 ) ;
					~value =  If (~cr_pos = 0 ; ~list ;  Left(  ~list ; ~cr_pos - 1 ) ) ; 
					~list = Replace ( ~list ; 1 ; ~cr_pos  ;  "" ) ; // Right ( ~list ; ~list_length - ~cr_pos ) ;
					~list_length = ~list_length - ~cr_pos ;
					~void = Collection.Ω( "ΩsetValue";~convertedVarName;~i ;~value;"";"" ); 
					~i = ~i + 1
				];
					Collection.Ω( "ΩsetSize";~convertedVarName;"";""; Case ( ~i = 1 ; 0 ;  ~value = "" ; ~i-2 ; ~i-1 ) ;"" )   
			) & True
		) ;



	function = "Get";
		/*	GET:
			Return the value of the currentIndex of the Collection.
			If the Collection doesn't exist or the currentIndex is at 0, then a blank value is returned.
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~currentIndex = Collection.Ω ( "ΩgetCurrentIndex" ; ~convertedVarName; ""; ""; ""; "" )
		];
			Collection.Ω( "ΩgetValue" ; ~convertedVarName; ~currentIndex ;"";"";"")
		 
		) ;


	function = "GetAtIndex" ;
		/*	GETATINDEX:
			Return the value of the specified Index of the Collection.
			If the Collection doesn't exist a blank value is returned.
			If the specified index is beyond the size of the Collection, a blank value is returned.
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) 
		];
			Collection.Ω( "ΩgetValue" ; ~convertedVarName; index ;"";"";"")
		) ;


	function = "GetCurrentIndex" ;
		/*	GETCURRENTINDEX:
			Return the currentIndex of a Collection.
			If the Collection doesn't exist a blank value is returned.
		*/
		
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) 
		];
			Collection.Ω ( "ΩgetCurrentIndex" ; ~convertedVarName; ""; ""; ""; "" )
		) ;	
		
		

	function = "GetSize" ;
		/*	GETSIZE:
			Return the size of a Collection.
			Newly created empty collections will return 0.
			If a collection doesn't exist, a blank value is returned.
		*/
		
		Let(
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ;
			Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "")
		) ;


	function = "GoToFirst" ;
		/*	GOTOFIRST:
			Set the currentIndex of a Collection to 1.
			If the Collection is created but empty, 0 is returned.  
			If the Collection does not exist, 0 is returned.  
			Otherwise, the Colllection exists and is populated, a 1 is returned.
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") 
		];
			If( 
				~size < 1 ; 
					False ;	
				Collection.Ω( "ΩsetCurrentIndex" ; ~convertedVarName ;1 ;"";""; "") &
				True
			)		
		) ;


	function = "GoToIndex" ;
		/*	GOTOINDEX:
			Set the currentIndex of a Collection to the specified index.
			If the Collection is created but empty, 0 is returned and the currentIndex remains unchanged (should be 0 anyway).  
			If the Collection does not exist, 0 is returned.  
		
			If the specified index is beyond the size of the collection, 0 is returned and teh currentIndex remains unchanged.
			Otherwise, the Colllection exists within that size, currentIndex is set and 1 is returned.
		
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") 
		];
			Case( 
				 Truncate ( GetAsNumber( index) ; 0  ) ≠ index ; 
					0 ;
				index < 0 ; 
					False ;	
				index > ~size ; 
					False ;	
				Collection.Ω( "ΩsetCurrentIndex" ; ~convertedVarName ; index ;"";""; "") &
				True
			)		
		) ;


	Function = "GoToLast";
		/*	GOTOLAST:
			Set the currentIndex of a Collection to the size of the Collection.
			If the Collection is created but empty, 0 is returned.  
			If the Collection does not exist, 0 is returned.  
			Otherwise, the Colllection exists and is populated, a 1 is returned.
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "")
		];
			If( 
				~size < 1 ; 
					False ;	
				Collection.Ω( "ΩsetCurrentIndex" ; ~convertedVarName ; ~size ;"";""; "") &
				True
			)		
		) ;



	function = "GoToNext" ;

		/*	GOTONEXT:
			Increment the currentIndex of the Collection by 1.
			If the currentIndex is at the size of the Collection, leave the currentIndex unchanged and return 0.
			If the Collection doesnt exist, return 0.
			If the Collection exists but is empty, return 0.
			Otherwise, increment the currentIndex and return 1.		
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") ; 
			~currentIndex = Collection.Ω ( "ΩgetCurrentIndex" ; ~convertedVarName; ""; ""; ""; "" ) 
		];
			Case( 
		
				~size = "?" ;
					False ;
				~size < 1 ;
					False ;
				~currentIndex >= ~size ; 
					False ;	
				Collection.Ω( "ΩsetCurrentIndex" ; ~convertedVarName ; ~currentIndex + 1 ;"";""; "") &
				True
			)		
		) ;


	Function = "GoToPrevious" ;

		/*	GOTOPREVIOUS:
			Decrement the currentIndex of the Collection by 1.
			If the currentIndex is at 0, leave the currentIndex unchanged and return 0.
			If the Collection doesnt exist, return 0.
			If the Collection exists but is empty, return 0.
			Otherwise, decrement the currentIndex and return 1.		
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~currentIndex = Collection.Ω ( "ΩgetCurrentIndex" ; ~convertedVarName; ""; ""; ""; "" ) 
		];
			Case( 
				~currentIndex <= 1 ; 
					False ;	
				Collection.Ω( "ΩsetCurrentIndex" ; ~convertedVarName ; ~currentIndex - 1 ;"";""; "") &
				True	
			)		
		) ;


	Function = "GoToZero";
		/* 	GOTOZERO:
			Set the currentIndex of a Collection to 0.
			If the Collection does not exist, 0 is returned.  
			Otherwise, the Colllection exists, a 1 is returned.
		*/		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") 
		];
			Case( 
				IsEmpty (~size)  ; 
					False ;	
				Collection.Ω( "ΩsetCurrentIndex" ; ~convertedVarName ;0 ;"";""; "") &
				True
			)		
		) ;

	function = "Inject" ;
		/*	INJECT:
			Insert a row into the Collection at the currentIndex and incrememnt the index of all rows above by 1, increase the Collection size by 1.
			If the Collection does not exist, do nothing and return 0.
			If the Collection is empty, do nothing and return 0.
			If the currentIndex is zero, do nothing and return 0.
			Otherwise, inject the element and return 1.
			The currentIndex of the Collection will remain unchanged.  
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") ; 
			~currentIndex = Collection.Ω ( "ΩgetCurrentIndex" ; ~convertedVarName; ""; ""; ""; "" ) 
		];
		
			Case(
				~size < 1 ; 
					False ;
				~currentIndex < 1 ;
					False ;
				While(
					[
						~index = ~size
					];
						~index >= ~currentIndex ;
					[
						~value_to_set = Collection.Ω( "ΩgetValue" ; ~convertedVarName; ~index ;"";"";"")  ;
						~void =
							Collection.Ω( "ΩsetValue";~convertedVarName;~index + 1 ;~value_to_set;"";"" ) ;
						~index = ~index - 1 
					];
		
					""
				)  &
				Collection.Ω( "ΩsetValue";~convertedVarName;~currentIndex ;value;"";"" ) &
				Collection.Ω( "ΩsetSize";~convertedVarName;"";"";~size + 1 ;"" )  &
				True			
			) 
		) ;


	function = "New";
		/*	NEW:
			Create a new blank Collection with size of 0 and currentIndex of 0.
			If a collection exists by that ID already, all rows will be cleared, size and currentIndex both set to zero.
		*/	
			
		Collection.Clear ( collectionID ) & 
		Let( [
		
			~incoming_priv_collection = $__priv_collection ;
			~convertedVarName = Collection.Ω ( "ΩconvertID" ; ""; ""; ""; ""; collectionID ) ; 
			$__priv_collection = collectionID ;
			~void =
				Evaluate( "Let( " &  ~convertedVarName & "_@collectionID = $__priv_collection ; 0 )") ;
		
			$__priv_collection = ~incoming_priv_collection ;
			~void =
				Collection.Ω( "ΩsetSize" ; ~convertedVarName; ""; ""; 0 ;"") & 
				Collection.Ω( "ΩsetCurrentIndex" ; ~convertedVarName ; 0 ; "";""; "") 
		];
			""
		);



	function = "Remove";
		/*	REMOVE:
			Remove the row at the current index and decrement the index of all the rows above by 1, decrease the size of the Collection by 1.
			If the Collection ,doesnt exist, do nothing and return 0.
			If the Collection exists but is empty, do nothing and return 0.
			If the currentIndex is 0, do nothing and return zero.
			Otherwise, remove the row and return 1.
			If the row is the last of the Collection,  decrease the currentIndex by 1, otherwise currentIndex will remain unchanged.
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") ; 
			~currentIndex = Collection.Ω ( "ΩgetCurrentIndex" ; ~convertedVarName; ""; ""; ""; "" ) 
		];
		
			Case(
				~size < 1 ; 
					False ;
				~currentIndex < 1 ;
					False ;
				While(
					[
						~index = ~currentIndex
					];
						~index <= ~size;
					[
						~nextValue = Collection.Ω( "ΩgetValue" ; ~convertedVarName; ~index + 1 ;"";"";"") ;
						~void =
							Collection.Ω( "ΩsetValue";~convertedVarName;~index ;~nextValue;"";"" ) ;
						~index = ~index + 1 
					];
						""
				)  &
				Collection.Ω( "ΩsetSize";~convertedVarName;"";"";~size - 1;"" ) &
				Collection.Ω( "ΩsetCurrentIndex" ; ~convertedVarName ; ~currentIndex - 1 ;"";""; "") &
				True
			) 
		); 
		

	
	function = "Set";
		/*	SET:
			Set the value of row at the current Index of the Collection.
			If collection is empty or nonexistent, do nothing and return 0. 
			If currentIndex is 0, do nothing and return 0. 
			Otherwise set the value and return 1.
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~currentIndex = Collection.Ω ( "ΩgetCurrentIndex" ; ~convertedVarName; ""; ""; ""; "" ) 
		];
			If(
				~currentIndex < 1 ;
					False ;
				Collection.Ω( "ΩsetValue";~convertedVarName; ~currentIndex ; value;"";"" ) & 
				True
			) 
		);
				

	function = "SetAtIndex";

		/*	SETATINDEX:
			Set the value of row at the specified Index of the Collection.
			If the Collection is nonexistent, do nothing and return 0. 
			If the size of the Collection is less than the index specified , increase the collection size to fit (with empty rows in between). 
			Set the value and return 1.
			
		*/
			Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") 
		];
			Case(
				index < 1 ;
					False  ;
				IsEmpty( ~size)  ;
					False  ;
				index > ~size ;
					Collection.Ω( "ΩsetValue";~convertedVarName;index ;value;"";"" ) &
					Collection.Ω( "ΩsetSize";~convertedVarName;"";"";index;"" ) & 
					True ;
				Collection.Ω( "ΩsetValue";~convertedVarName;index ;value;"";"" ) &
				True
			) 
		);

	
	function = "ToJsonArray" ;

		/* 	TOJSONARRAY:
			Convert the Collection to a JSON Array.
			Valid JSON objects and arrays will be added as such.
			All other values will be treated as strings.
			Empty values will go in as empty string.
			Empty or nonexistent Collections will result in an empty array.
			Number of elements in the array will match exactly the size of the collection.
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") 
		];
			If(
				~size < 1 ;
					"[]" ;
				While ( 
					[ 
						~array = "[" ;
						~index = 1 
					] ; 
						~index <= ~size ; 
					[ 
						~value = Collection.Ω( "ΩgetValue" ; ~convertedVarName; ~index ;"";"";"") ;
						~jfe_start = Left( JSONFormatElements ( ~value ) ; 1 ) ;
						~comma = If ( ~index > 1 ; "," ; "" ) ;
						~value_to_insert = 
							Case(
								~jfe_start = "{" ; 
									JSONSetElement ( "{}" ; "" ; ~value ; JSONObject ) ;
								~jfe_start = "[" ; 
									JSONSetElement ( "[]" ; "" ; ~value ; JSONArray ) ;
								Let( ~string = JSONSetElement ( "[]" ; 0 ; ~value ; JSONString ) ; Middle ( ~string ; 2 ; Length ( ~string) - 2 ) ) 
							) ;
						~array = ~array & ~comma & ~value_to_insert ;
						~index = ~index + 1 
					] ; 
						~array & "]"
				)
			) 
		) ;
		

	function = "ToList" ;
		
		/*	TOLIST:
			Convert the Collection to a value list.
			Any multi-line elements will create more values in the list that rows in the Collection. 
			Empty rows will result in empty values in the list. 
		*/
		
		Let( [
			~convertedVarName = Collection.Ω ( "ΩconvertID";"";"";"";""; collectionID ) ; 
			~size = Collection.Ω( "ΩgetSize" ; ~convertedVarName ; ""; "";""; "") 
		];
			If(
				~size < 1 ;
					"" ;
				While ( 
					[ 
						~list = "" ;
						 ~index = 1 
					] ; 
						~index <= ~size ; 
					[ 
						~value = Collection.Ω( "ΩgetValue" ; ~convertedVarName; ~index ;"";"";"") ;
						~list = ~list & ~value & "¶" ;
						~index = ~index + 1 
					] ; 
						Left ( ~list ; Length ( ~list ) - 1 )
				)
			) 
		) ;

/*END OF PUBLIC FUNCTIONS*/


/*PRIVATE FUNCTIONS - CALLED ONLY RECURSIVELY FROM WITHIN THIS FUNCTION */

	function = "ΩconvertID" ;
		/* convert collectionID to convertedVarName */
		Let( [
			~ID_with_$ =
				Case ( 
					Left ( collectionID ; 2 ) = "$$" ; 
						 "$$Ωcol_" & Right ( collectionID ; Length ( collectionID) - 2) ; 
					Left ( collectionID ; 1 ) = "$" ; 
						 "$Ωcol_" & Right ( collectionID ; Length ( collectionID) - 1) ; 
					"$Ωcol__"  & collectionID
				)  ;
			 ~ID_clean = 
				Filter ( 
					~ID_with_$  ; 
					"$Ω_aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ1234567890" 
				)  
		] ;
			Left ( ~ID_clean ; 50)  & "__" & Left( GetContainerAttribute ( ~ID_with_$ ; "MD5" ) ; 8 ) 
		) ;

	function = "ΩgetCurrentIndex" ;
		/* Return the current index based using convertedVarName */
		Evaluate ( convertedVarName & "_@currentIndex" ) ;

	function = "ΩgetSize" ;
		/* Return the size of the collection based using convertedVarName */
		Evaluate ( convertedVarName & "_@size" ) ;

	function = "ΩgetValue" ;
		/* Return the value of the collection at a specified index using convertedVarName */
		Case( 
			IsEmpty( index) ; 
				"" ; 
			index=0 ; 
				"" ; 
			Evaluate ( convertedVarName & "__" & Right ( 1000000000 + index ; 9 ) )
		) ;

	function = "ΩsetCurrentIndex" ;
		/* set currentIndex of collection using convertedVarName */
		Let( [

			~incoming_priv_collection = $__priv_collection ;
			$__priv_collection = index ;
			~void = 
				Evaluate ( "Let (" & convertedVarName & "_@currentIndex = $__priv_collection ; 0 )"  ) ;
			$__priv_collection = ~incoming_priv_collection 
		] ; 
			""	
		) ;

	function = "ΩsetSize" ;
		/* set size of collection using convertedVarName */
		Let ( [
			~incoming_priv_collection = $__priv_collection ;
			$__priv_collection = size ;
			~void = 
				Evaluate( " Let ( " & convertedVarName & "_@size = $__priv_collection ; 0 )"  ) ;
			$__priv_collection = ~incoming_priv_collection
		] ;
			""
		) ;

	function = "ΩsetValue" ;
		/* set value at specific index of collection using convertedVarName */
		Let( [
			~incoming_priv_collection = $__priv_collection ;
			$__priv_collection = value ;
			~void = 
				Evaluate ( "Let ( " & convertedVarName & "__" & Right ( 1000000000 + index ; 9 ) & " = $__priv_collection ; 0 )"  ) ;
			$__priv_collection = ~incoming_priv_collection
		];
			""
		) 


/*END OF PRIVATE FUNCTIONS*/

)

/* Version HIstory */
/* 2021-02-24 - Created, Nat Robinson */