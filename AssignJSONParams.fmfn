/*
 *  CUSTOM FUNCTION
 *    AssignJSONParams ( params )
 *
 *  DESCRIPTION
 *    Assigns what is stored in params as FileMaker variables
 *
 *  PARAMS
 *    params: A JSON object that contains the param name as the key and param value as the value
 *
 *  RETURNS
 *    Boolean
 *
 *  DEPENDENCIES
 *    --NONE--
 *
 *  CHANGELOG
 *    2022-02-07: Paul McCudden (paul@peak14.solutions): Created
 *    2022-06-16: Paul McCudden (paul@peak14.solutions): Update to loop if necessary
 *    2022-09-11: Paul McCudden (paul@peak14.solutions): Have it unformat the JSON to make it not run into parse errors
*/

Let (
    [
        ~params = If ( IsEmpty ( params ); Get ( ScriptParameter ); params );
        ~params = If ( Left ( JSONFormatElements ( ~params ); 1 ) = "?"; "{}"; ~params );
        ~params = JSONDeleteElement ( ~params; Get ( UUID ) )
    ];

    If ( PatternCount ( ~params; "{" ) + PatternCount ( ~params; "[" ) = 1;

        // If no nested JSON variables, we don't need to loop
        Let (
            [
                ~s = Get ( UUID );
                ~params = ~s & ¶ & ~params & ¶ & ~s
            ];

            Evaluate ( "Let([¶" & Substitute ( ~params;
                // Strip out uneeded json info and seperate each variable onto it's own line
                ["{"; ""];
                ["}"; ""];
                [","; ¶];

                // Format each line to have the proper syntax
                ["¶\""; "¶$"];
                ["\":"; "="];

                // Eliminate any empty lines
                ["¶¶"; ¶ & ~s & ¶];
                ["¶¶"; ¶ & ~s & ¶];
                [~s & ¶; ""];
                [¶ & ~s; ""];
                [~s; ""];

                // Format each line for the let request
                [¶; ";¶"];
                ["\\r"; "\¶"]
            ) & "¶];\"Used Substitute Method\")" )
        );

        // We have nested JSON variables, need to loop
        While (
            [
                ~paramList = JSONListKeys ( ~params; "" );
                ~paramCount = ValueCount ( ~paramList );
                ~i = 0;
                ~setVariable = ""
            ];

            ~i < ~paramCount;
            
            [
                ~i = ~i + 1;
                ~thisParam = GetValue ( ~paramList; ~i );
                ~thisValue = Substitute ( JSONGetElement ( ~params; ~thisParam );
                    ["\""; "\\\""];
                    ["\\r"; "\¶"]
                );
                ~thisParam = If ( Left ( ~thisParam; 1 ) <> "$"; "$") & ~thisParam;
                ~setVariable = Evaluate ( "Let([" & ~thisParam & "=\"" & ~thisValue & "\"];1)" )
            ];

            "Used While() Method"
        )

    )

)