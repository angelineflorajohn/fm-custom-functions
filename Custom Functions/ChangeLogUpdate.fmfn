/*
 *  CUSTOM FUNCTION
 *    ChangeLogUpdate ( fieldList ; JSON )
 *
 *  DESCRIPTION
 *    Takes the modified fields and sets their values. Be sure to modify the below variables to fit your solution:
 *      ~changeLogExclusions: the field names you don't want to be included in the log
 *      ~dotEscape: what replaces "." in the field name if encountered
 *      ~UTCOffset: the UTC offset for what timezone you would like the timestamps to be in
 *      ~observesDST: True or false if Day Light Savings time is observed
 *
 *  PARAMS
 *    fieldList: A list of field names to check the values of
 *    JSON: The current ChangeLog JSON created by this function
 *
 *  RETURNS
 *    Updated JSON that includes the new values for the modified fields in the following format:
 *      {
 *          fieldName : {
 *               timestamp as ISO : {
 *                   acct: Who did the change
 *                   val : What the field was changed to
 *               }
 *          }
 *      }
 *
 *  DEPENDENCIES
 *    ISOFromTimestamp: by Jeremy Bante
 *    GetCurrentUTCTimestamp
 *
 *  CHANGELOG
 *    2020-03-09: Paul McCudden (paul@peak14.solutions): Created
 *    2020-03-11: Paul McCudden (paul@peak14.solutions): Now doesn't log the field if it's a calc field and escapes "." in the field name
 *    2021-07-21: Paul McCudden (paul@peak14.solutions): Updated to use UTC timestamp
 *    2022-10-17: Paul McCudden (paul@peak14.solutions): Added in a script parameter if record is commited in a script
*/

While ( 
    //initialVariable
    [
        
        //--------------SETTINGS------------------
        ~changeLogExclusions = List (
            "zz_changeLog" ;
            "zz_creationAccount" ;
            "zz_creationTimestampLocal_c" ;
            "zz_creationTimestampUTC";
            "zz_modificationAccount";
            "zz_modificationTimestampLocal_c";
            "zz_modificationTimestampUTC";
            "zzModificationTimestampHost";
            "zzModificationTimestampUTC";
            "zzModifiedBy";
            "zzChangeLog_ae"
	    );
        ~dotEscape = "~dot~";
        //------------END OF SETTINGS--------------

        ~utcTimestamp = GetAsTimestamp ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) - Time (7;0;0);
        ~ISOTimestamp = 
            // Year
            Right ( "0000" & Year ( ~utcTimestamp ) ; 4 )
			& "-"

            // Month
			& Right ( "00" & Month ( ~utcTimestamp ) ; 2 )
			& "-"

            // Day
			& Right ( "00" & Day ( ~utcTimestamp ) ; 2 )
            & "T"

            // Hour
            & Right ( "00" & Hour ( ~utcTimestamp ) ; 2 )

            // Minute
			& ":" & Right ( "00" & Minute ( ~utcTimestamp ) ; 2 )

            // Seconds
			& If ( Seconds ( ~utcTimestamp ) > 0 ;
				":" & Right ( "00" & Div ( Seconds ( ~utcTimestamp ) ; 1 ) ; 2 )
			)

            // Miliseconds
			& If ( Mod ( Seconds ( ~utcTimestamp ) ; 1 ) > 0 ;
				"," & Replace ( Mod ( Seconds ( ~utcTimestamp ) ; 1 ) ; 1 ; 1 ; "" )
			);
        ~fieldCount = ValueCount ( fieldList );
        ~i = 0;
        ~account = Get ( AccountName );

        //Start with a blank JSON if the passed JSON isn't a valid JSON
        ~newjson = If ( Left ( JSONFormatElements ( JSON ) ; 1 ) = "?" ; "{}" ; JSON )
    ];
    
    //condition
    ~i < ~fieldCount;
    
    //logic
    [
        ~i = ~i + 1;
        ~thisOriginalField = GetValue ( fieldList ; ~i );

        //Add escape values on any field that might have a dot in it
        ~thisEscapedField = Substitute ( ~thisOriginalField ; "." ; ~dotEscape );
        
        //Ignore this field if it's a calc field or in our exclusion list
        ~newJSON = If ( ( IsEmpty ( FilterValues ( ~changeLogExclusions ; ~thisOriginalField ) ) and ( Right ( LeftWords ( FieldType ( Get ( FileName ) ; ~thisOriginalField ) ; 1 ) ; 4 ) <> "Calc" ) );
            //Update
            If ( IsEmpty ( Get ( ScriptName ) );
                JSONSetElement ( ~newJSON ; ~thisEscapedField & "." & ~ISOTimestamp ; JSONSetElement ( "" ;
                    ["val" ; GetField ( ~thisOriginalField ) ; JSONString];
                    ["acct" ; ~account ; JSONString]
                ) ; JSONObject ) ;
                JSONSetElement ( ~newJSON ; ~thisEscapedField & "." & ~ISOTimestamp ; JSONSetElement ( "" ;
                    ["val" ; GetField ( ~thisOriginalField ) ; JSONString];
                    ["acct" ; ~account ; JSONString];
                    ["script"; Get ( ScriptName ); JSONString ]
                ) ; JSONObject )
            );
            //Don't update
            ~newJSON
        )
    ];
    
    //result
    ~newJSON
)