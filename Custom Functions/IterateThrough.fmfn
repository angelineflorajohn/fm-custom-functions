/*
 *  CUSTOM FUNCTION
 *    iterateThrough ( listOrArrayOrObject; thisVariableName; iterationVariableName )
 *
 *  DESCRIPTION
 *    To be used in the "Exit Loop If" Script step and will return true or false
 *
 *  PARAMS
 *    listOrArrayOrObject: The variable that contains the list or array or object to iterate through
 *    iterationVariableName (optional): The name of the variable to use to count through the list. If nothing passed, will use $i. Clears after last iteration
 *    thisVariableName (optional): The name of the variable to set this current iteration variable to. If nothing passed, will use $thisValue
 *
 *  RETURNS
 *    True or False
 *
 *  DEPENDENCIES
 *    FileMaker 19.5 or higher
 *
 *  CHANGELOG
 *    2022-03-28: Paul McCudden: Created
 *    2022-07-07: Paul McCudden: Updated to work with arrays and objects
*/

Let (
    [
        thisVariableName = If ( IsEmpty ( thisVariableName ); "$thisValue"; If ( Left ( thisVariableName; 1 ) <> "$"; "$" ) & thisVariableName );
        iterationVariableName = If ( IsEmpty ( iterationVariableName ); "$i"; iterationVariableName );
        
        ~listType = Case (
            Left ( JSONFormatElements ( listOrArrayOrObject ); 1 ) = "?"; "list";
            JSONGetElementType ( listOrArrayOrObject ; "" ) = JSONArray; "array";
            JSONGetElementType ( listOrArrayOrObject ; "" ) = JSONObject; "object";
            ""
        );
        ~newIteration = Evaluate ( iterationVariableName ) + 1;
		~exitLoop = ~newIteration > ValueCount ( If ( ~listType = "list"; listOrArrayOrObject; JSONListKeys ( listOrArrayOrObject; "" ) ) );
        ~newIteration = If ( ~exitLoop; ""; ~newIteration );
        ~newVariableValue = If ( ~exitLoop; ""; Case (
            ~listType = "list"; GetValue ( listOrArrayOrObject; ~newIteration );
            GetValue ( JSONListValues ( listOrArrayOrObject; "" ); ~newIteration ) )
        );

       ~letStatement = "Let([" & thisVariableName & "=\"" & ~newVariableValue & "\";" & iterationVariableName & "=\"" & ~newIteration & "\"];" & ~exitLoop & ")"
    ];

    Evaluate ( ~letStatement )

)