/*
 *  CUSTOM FUNCTION
 *    fpAttributesSQL
 *
 *  DESCRIPTION
 *    Used for many different field calculations for SRNET_AUDITGENERAL table to make updating the fpAttribute keys for the different years easy
 *
 *  PARAMS
 *    pre2019SelectField: The field reference to which field to select for before 2019
 *    post2019SelectField: The field reference to which field to select for 2019 or later
 *    key: A key that will define what attributes to match the sql to. Check the ~attributeList to see what keys have been configured
 *
 *  RETURNS
 *    Text
 *
 *  DEPENDENCIES
 *    SQLFieldName
 *    SQLTableName
 *    ValueExists
 *
 *  CHANGELOG
 *    2022-01-5: Paul McCudden: Created
*/


While (
    [
        ~year = SRNET_AUDITGENERAL::_Audit Year;
        ~visitID = SRNET_AUDITGENERAL::visitId;
        ~pre2019InclusionIDList = List (
            "136988f1-70d4-4a63-a3b7-0431cb5dd463";
            "e4970eba-441b-432a-831f-1bfa6197854b";
            "3dbd7433-c2f7-4bf5-a447-8b6a5e6f649f";
            "ef0a667f-9bfa-4f10-91d1-b5b55ed54358"; 
            "5dc3f128-9966-4b3d-aa8e-5808052d6b0f";
            "657d43fd-35fe-4913-95a6-280ffc7c71ab";
            "1e1fd6a1-0cee-4a0c-b82c-658f5c715128";
            "cc8fb49f-ce57-4694-949d-231da48ac684";
            "f29a780d-73bb-4a65-b573-818c8d873383";
            "bf897ba2-4dab-4391-8a81-3efedb60fe25";
            "3bf0345b-d749-41b4-a426-de39501b6f1e";
            "1be667cb-2c3c-4185-85d6-399e6f00b619";
            "c7539a7e-d80d-44a3-9302-ac5791f1f35b";
            "7e07be8a-603b-4b44-8b8c-f2fb6f5649ea";
            "66cec0a8-1d42-4d7b-b959-43b17ec608f1"
        );
        ~initialSQLStatement = Case (
            ~year < 2019 or ValueExists ( ~visitID; ~pre2019InclusionIDList);
                "SELECT " & SQLFieldName ( pre2019SelectField ) &
                "¶FROM " & SQLTableName ( SRNET_FACILITYPROFILE::visitId ) &
                "¶WHERE " & SQLFieldName ( SRNET_FACILITYPROFILE::visitId ) & " LIKE '" & ~visitID & "%'";
            ~year >= 2019;
                "SELECT " & SQLFieldName ( post2019SelectField ) &
                "¶FROM " & SQLTableName ( facilityProfile_fpAttributes1::visitId ) &
                "¶WHERE " & SQLFieldName ( facilityProfile_fpAttributes1::visitId ) & " LIKE '" & ~visitID & "%'"
        );
        ~attributeList = Case (
            key = "all"; List (
                "# of Workers:%";
                ""
            );
            key = "direct"; List (
                "# of Direct Workers:%";
                "# of Direct-employed Workers:%";
                "# of Directly-employed Workers:%"
            );
            key = "indirect"; List (
                "# of Indirect Workers:%";
                "# of Indirect-employed Workers:%";
                "# of Indirectly-employed Workers:%"
            );
            key = "juvenileStudent"; List (
                "# of Student Workers:%";
                "# of Juvenile Workers (Students):%"
            );
            key = "foregin"; List (
                "Total # of Foreign Contract Workers (FCW):";
                ""
            );
            ""
        );
        ~sqlStatement = ~initialSQLStatement & If ( ValueCount ( ~attributeList > 0 ); "¶AND (" );
        ~i = 0
    ];
    
    not IsEmpty ( ~initialSQLStatement ) and ~i <= ValueCount ( ~attributeList );

    [
        ~i = ~i + 1;
        ~sqlStatement = ~sqlStatement &

            // Add the "OR" to the end of the last line if this isn't the first line
            If ( ~i > 1; " OR" ) &

            // Based on the year, add the field that contains the fpAttributes
            "¶  " & If ( ~year < 2019; SQLFieldName ( SRNET_FACILITYPROFILE::qstnText ); SQLFieldName ( facilityProfile_fpAttributes1::fpAttributes ) ) &

            // Add the "LIKE" statement comparing it to the appriopiate string
            "LIKE '" & GetValue ( ~attributeList; ~i ) & "'" &

            // If this is the last line, append the closing ")" for the "AND" statement
            If ( ~i = ValueCount ( ~attributeList ); "¶ )")
    ];

    If (
        IsEmpty ( ~sqlStatement );
        "";
        ExecuteSQL ( ~sqlStatement ; "" ; "" )
    )
)
