/*
 *  CUSTOM FUNCTION
 *    JWTAssertion ( payload; privateRSAKey; passphrase )
 *
 *  DESCRIPTION
 *    Gets a JWT with passed parameters
 *
 *  PARAMS
 *    payload: The payload for the JWT token
 *	  privateRSAKey: The Private RSA Key. Has to be in the PKCS#1 format. Example:
 *			-----BEGIN RSA PRIVATE KEY-----
 *			Proc-Type: 4,ENCRYPTED
 *			DEK-Info: DES-EDE3-CBC,D46EB739CE27BBEC
 *
 *			-----END RSA PRIVATE KEY-----
 *	  passphrase: The Passphrase to decode the RSA Key
 *
 *  RETURNS
 *    Text
 *
 *  DEPENDENCIES
 *    --NONE--
 *
 *  CHANGELOG
 *    2022-04-22: Paul McCudden: Simplified and converted into a custom function from both Steve's works
 *
 *  CREDIT
 *	  Steve Winter for the original calculation (https://msdev.nz/generating-jwts-in-native-filemaker/)
 *    Steve Senft-Herrera for working with me and doing most of the legwork and findout out that it IS possible to make JWT using naitive FileMaker
*/

Let (
    [
	
	// Settings
	~jwt_algorithm = "RS256";
	~hash_algorithm = "SHA256" ;
	~RFCCode = 4648;

	~header = Substitute (
		Base64EncodeRFC (
			~RFCCode;
			JSONSetElement ( "{}" ;
				[ "alg"; ~jwt_algorithm; JSONString ];
				[ "type"; "JWT"; JSONString ]
			)
		);
		[ "=" ; "" ];
		[ "+" ; "-" ];
		[ "/" ; "_" ]
	);

	~payload = Substitute (
		Base64EncodeRFC ( ~RFCCode ; payload );
		[ "=" ; "" ];
		[ "+" ; "-" ];
		[ "/" ; "_" ]
	);

	~body = ~header & "." & ~payload;

	~signature = Substitute (
		Base64EncodeRFC (
			~RFCCode;
			CryptGenerateSignature (
				~body;
				~hash_algorithm;
				privateRSAKey;
				passphrase
			)
		);
		[ "=" ; "" ];
		[ "+" ; "-" ];
		[ "/" ; "_" ]
	)
    ];

	~body & "." & ~signature
)